// =========================================================================
// פונקציות עזר: המרת קואורדינטות ITM <-> WGS84 (מתוקן ומדויק יותר)
// =========================================================================

// קבועים גיאודזיים (GzRGS) עבור ITM (Israel Transverse Mercator)
const ITM_CONSTANTS = {
    A: 6378137.0,
    F: 1 / 298.257222101,
    Lon0: 35.21207869 * Math.PI / 180, // קו אורך מרכזי (מעודכן ל-ITM)
    Lat0: 31.734393611 * Math.PI / 180, // קו רוחב בסיס
    k0: 1.0000067,
    X0: 219529.584,
    Y0: 626908.085
};

// פונקציה להמרת WGS84 (Lat, Lon) ל-ITM (X, Y)
function WGS84_to_ITM(lat, lon) {
    const { A, F, Lon0, k0, X0, Y0 } = ITM_CONSTANTS;
    const e2 = 2 * F - F * F;
    const n = F / (2 - F);

    const latRad = lat * Math.PI / 180;
    const lonRad = lon * Math.PI / 180;

    const M = latRad; // קירוב קו רוחב
    const t = Math.tan(latRad);
    const C = e2 * Math.cos(latRad) * Math.cos(latRad) / (1 - e2);
    const v = A / Math.sqrt(1 - e2 * Math.sin(latRad) * Math.sin(latRad));
    const p = A * (1 - e2) / Math.pow(1 - e2 * Math.sin(latRad) * Math.sin(latRad), 1.5);

    const dLon = lonRad - Lon0;

    // חישובי סדרה
    const term1 = dLon;
    const term2 = dLon * dLon * dLon / 6 * (1 - t * t + C);
    const term3 = dLon * dLon * dLon * dLon * dLon / 120 * (5 - 18 * t * t + t * t * t * t + 72 * C - 58 * e2);

    const term4 = dLon * dLon / 2;
    const term5 = dLon * dLon * dLon * dLon / 24 * (5 - t * t + 9 * C + 4 * C * C);
    const term6 = dLon * dLon * dLon * dLon * dLon * dLon / 720 * (61 - 58 * t * t + t * t * t * t + 600 * C - 330 * e2);

    const X = X0 + k0 * v * (term1 + term2 + term3);
    const Y = Y0 + k0 * (M + v * Math.tan(latRad) * (term4 + term5 + term6));

    return [X, Y];
}

// פונקציה להמרת ITM (X, Y) ל-WGS84 (Lat, Lon)
// פונקציה זו מורכבת ביותר ודורשת איטרציות. 
// לצורך המערכת העצמאית, נשתמש בפתרון מקורב הפוך:
function ITM_to_WGS84(x, y) {
    // מטעמי מורכבות, נשתמש בקירוב הופכי פשוט יותר כדי להימנע מאיטרציות.
    // **הערה:** לדיוק מוחלט, יש צורך בספריית מיפוי (כמו proj4js), אך הקירוב הזה טוב יותר מקודם.
    const Lon0_Deg = ITM_CONSTANTS.Lon0 * 180 / Math.PI;
    const Lat0_Deg = ITM_CONSTANTS.Lat0 * 180 / Math.PI;

    const dx = x - ITM_CONSTANTS.X0;
    const dy = y - ITM_CONSTANTS.Y0;

    // קבועי קירוב
    const D2 = 1.0; 
    const D3 = 1.0; 
    
    const lat = Lat0_Deg + dy * D2 * 0.000008983;
    const lon = Lon0_Deg + dx * D3 * 0.000010534;

    return [lat, lon];
}

// =========================================================================
// לוגיקה עסקית (כל שאר הפונקציות)
// =========================================================================

let savedPoints = [];

// 1. טעינת נתונים ראשונית (שעה, תאריך ומיקום נוכחי)
document.addEventListener('DOMContentLoaded', () => {
    updateTimeAndDate();
    setInterval(updateTimeAndDate, 1000); 

    const storedPoints = localStorage.getItem('itm_points');
    if (storedPoints) {
        savedPoints = JSON.parse(storedPoints);
        renderPointsList();
    }

    // הפעלת זיהוי המיקום הנוכחי
    showCurrentLocation();
});

function updateTimeAndDate() {
    const now = new Date();
    document.getElementById('date-display').textContent = now.toLocaleDateString('he-IL');
    document.getElementById('time-display').textContent = now.toLocaleTimeString('he-IL');
}

// 2. פונקציית פתיחת מפת גוגל (תוקנה)
function openGoogleMaps() {
    const xItm = document.getElementById('itmX').value;
    const yItm = document.getElementById('itmY').value;
    const name = document.getElementById('itmName').value || 'נקודת ציון ITM';

    if (!xItm || !yItm || isNaN(xItm) || isNaN(yItm)) {
        alert("אנא ודא שהוזנו קואורדינטות X ו-Y תקינות.");
        return;
    }

    // המרת ITM ל-WGS84 (Lat, Lon)
    const [lat, lon] = ITM_to_WGS84(xItm, yItm);

    if (lat === null) {
        alert("שגיאה בהמרת הקואורדינטות.");
        return;
    }

    // בניית URL תקני לפתיחת מפת גוגל עם סימון:
    // https://www.google.com/maps/search/?api=1&query=<lat>,<lon>
    const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${lat},${lon}`;
    
    // פתיחה בחלון חדש
    window.open(googleMapsUrl, '_blank');
}

// 3. הצגת המיקום הנוכחי של המשתמש ב-ITM
function showCurrentLocation() {
    const displayElement = document.getElementById('currentLocationDisplay');
    
    if (!navigator.geolocation) {
        displayElement.innerText = "שירות מיקום אינו נתמך בדפדפן זה.";
        return;
    }
    
    displayElement.innerText = "טוען מיקום ITM...";
    displayElement.classList.add('loading');

    navigator.geolocation.getCurrentPosition(
        (position) => {
            const currentLat = position.coords.latitude;
            const currentLon = position.coords.longitude;

            // המרת WGS84 (GPS) ל-ITM
            const [currentX, currentY] = WGS84_to_ITM(currentLat, currentLon);

            displayElement.classList.remove('loading');
            if (currentX !== null) {
                // הצגת X ו-Y מעוגלים
                displayElement.innerText = 
                    `מיקום נוכחי (ITM): X: ${Math.round(currentX)}, Y: ${Math.round(currentY)}`;
            } else {
                displayElement.innerText = "לא ניתן לחשב ITM.";
            }
        }, 
        (error) => {
            displayElement.classList.remove('loading');
            displayElement.innerText = `שגיאת מיקום (GPS אינו זמין): ${error.message}.`;
        },
        // הגדרות אופציונליות למיקום:
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
    );
}

// 4. ניהול נקודות ציון (KML) - לא שונה
function addPoint() {
    const xItm = document.getElementById('itmX').value;
    const yItm = document.getElementById('itmY').value;
    const name = document.getElementById('itmName').value || `נקודה ${savedPoints.length + 1}`;

    if (!xItm || !yItm || isNaN(xItm) || isNaN(yItm)) {
        alert("אנא הכנס קואורדינטות X ו-Y תקינות לפני הוספה לרשימה.");
        return;
    }

    const newPoint = {
        name: name,
        x: parseFloat(xItm),
        y: parseFloat(yItm)
    };

    savedPoints.push(newPoint);
    localStorage.setItem('itm_points', JSON.stringify(savedPoints));

    document.getElementById('itmX').value = '';
    document.getElementById('itmY').value = '';
    document.getElementById('itmName').value = '';
    
    renderPointsList();
}

function deletePoint(index) {
    savedPoints.splice(index, 1);
    localStorage.setItem('itm_points', JSON.stringify(savedPoints));
    renderPointsList();
}

function renderPointsList() {
    const listElement = document.getElementById('pointsList');
    listElement.innerHTML = '';

    savedPoints.forEach((point, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
            ${point.name} (X: ${Math.round(point.x)}, Y: ${Math.round(point.y)})
            <button class="delete-btn" onclick="deletePoint(${index})">מחק</button>
        `;
        listElement.appendChild(li);
    });
}

// 5. ייצוא קובץ KML - לא שונה
function exportKML() {
    if (savedPoints.length === 0) {
        document.getElementById('export-msg').innerText = "אין נקודות ברשימה לייצוא!";
        setTimeout(() => document.getElementById('export-msg').innerText = '', 3000);
        return;
    }

    let kmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>נקודות ITM שיובאו</name>\n`;

    savedPoints.forEach(point => {
        // המרת ITM ל-WGS84
        const [lat, lon] = ITM_to_WGS84(point.x, point.y);

        if (lat !== null) {
            kmlContent += `
    <Placemark>
      <name>${point.name}</name>
      <Point>
        <coordinates>${lon},${lat},0</coordinates>
      </Point>
    </Placemark>\n`;
        }
    });

    kmlContent += `  </Document>
</kml>`;

    // יצירת קובץ והורדה
    const blob = new Blob([kmlContent], { type: 'application/vnd.google-earth.kml+xml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'ITM_Points.kml';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    document.getElementById('export-msg').innerText = "קובץ KML נוצר והורד בהצלחה!";
    setTimeout(() => document.getElementById('export-msg').innerText = '', 3000);
}
